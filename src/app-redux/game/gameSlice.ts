import { createSlice } from "@reduxjs/toolkit";
import { ICard } from "../../common/@types/app";
import { RootState } from "../store";
import { allCardsAsync, getAllCards, postCardAsync, postNewCard } from "./actions/gameActions";

export interface GameState {
  cards: ICard[];
  status: "idle" | "loading" | "failed";
}

const initialState: GameState = {
  cards: [],
  status: "idle",
};

export const gameSlice = createSlice({
  name: "game",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(allCardsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(allCardsAsync.fulfilled, getAllCards)
      .addCase(allCardsAsync.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(postCardAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(postCardAsync.fulfilled, postNewCard)
      .addCase(postCardAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCards = (state: RootState) => state.game.cards;
